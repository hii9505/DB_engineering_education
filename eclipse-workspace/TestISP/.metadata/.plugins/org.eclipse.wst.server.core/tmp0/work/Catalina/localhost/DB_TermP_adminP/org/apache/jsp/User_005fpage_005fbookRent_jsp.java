/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.29
 * Generated at: 2019-12-23 02:01:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public final class User_005fpage_005fbookRent_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 request.setCharacterEncoding("euc-kr"); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv =\"Content-Type\" content=\"text/html ; charset=EUC-KR\">\r\n");
      out.write("<title>Rent Book</title>\r\n");
      out.write("</head>\r\n");

	String isbn = request.getParameter("isbn");
	String in_id = request.getParameter("in_id");
	String in_pw = request.getParameter("in_pw");
	LocalDate today = LocalDate.now();
	int period = 10;
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	String sql = "";
	String msg = "회원 "+in_id+" 님 ";
	try{
		String jdbcUrl = "jdbc:mysql://localhost:3306/termproject";
		String dbId = "root";
		String dbPass = "1234";
	
		Class.forName("com.mysql.jdbc.Driver");
		conn = DriverManager.getConnection(jdbcUrl,dbId,dbPass);
	
		sql = "SELECT * FROM books_on_rent WHERE isbn="+isbn;
		pstmt=conn.prepareStatement(sql);
		rs= pstmt.executeQuery();
		if(rs.next() ){
			throw new Exception("이미 대출 중인 도서입니다.");
		} 
		pstmt.clearParameters();
		
		sql = "SELECT * FROM rent_reservation WHERE isbn= ? ORDER BY reserve_date LIMIT 1";
		pstmt=conn.prepareStatement(sql);
		pstmt.setString(1, isbn);
		rs= pstmt.executeQuery();
		if(rs.next()){ //예약자 존재
			if(! in_id.equals(rs.getString("memid")) ){ //예약자 차례가 아니면
				throw new Exception("선 예약자가 있습니다."); 
			}
		} 
		pstmt.clearParameters();
		
		/* 여기 까지 throw 안 발생하면 대출 가능한 상태인 것*/
		//
		sql = "SELECT memstat FROM member WHERE id = ?";
		pstmt=conn.prepareStatement(sql);
		pstmt.setString(1, in_id);
		rs= pstmt.executeQuery();
		if(rs.next()){
			if(rs.getString("memstat").equals("graduated")){
				msg += " 대학원생 신분으로 대여기간은 30일 입니다.";
				period = 30;
			} else if (rs.getString("memstat").equals("faculty_member") ){
				msg += " 교직원 신분으로 대여기간은 60일 입니다.";
				period = 60;
			} else {
				msg += " 학생 및 기타 신분으로 대여기간은 10일 입니다.";
				period = 10;
			}
		}
		pstmt.clearParameters();
		
		sql = "INSERT INTO books_on_rent values(?,?,?,?)";
		pstmt=conn.prepareStatement(sql);
		pstmt.setString(1, isbn);
		pstmt.setString(2, in_id);
		pstmt.setString(3, today.format(DateTimeFormatter.ISO_LOCAL_DATE));
		pstmt.setString(4, today.plusDays(period).format(DateTimeFormatter.ISO_LOCAL_DATE));
		pstmt.executeUpdate();
		pstmt.clearParameters();
		
		sql = "INSERT INTO rental_record VALUES(?,?,?)";
		pstmt=conn.prepareStatement(sql);
		pstmt.setString(1, isbn);
		pstmt.setString(2, in_id);
		pstmt.setString(3, today.format(DateTimeFormatter.ISO_LOCAL_DATE));
		pstmt.executeUpdate();
		pstmt.clearParameters();

      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<h2>신청 결과</h2>\r\n");
 
		sql = "SELECT * FROM books_on_rent WHERE isbn="+isbn;
		pstmt=conn.prepareStatement(sql);
		rs = pstmt.executeQuery();
		if(rs.next()){
			
      out.write("\r\n");
      out.write("\t\t\t<ul>\r\n");
      out.write("\t\t\t\t<li>고유번호 ");
      out.print(rs.getInt("isbn") );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li>신청ID ");
      out.print(rs.getString("RentMemID") );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li>대여시작 ");
      out.print(rs.getString("RentStartDate") );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li>반납기한 ");
      out.print(rs.getString("RentEndDate") );
      out.write("</li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t\t");

		}
	}catch (Exception e){
		e.printStackTrace();
		out.println(e.getMessage());
	} finally{
		if(rs != null) try{rs.close();}catch(SQLException sqle){}
		if(pstmt != null) try{pstmt.close();}catch(SQLException sqle){}
		if(conn != null) try{conn.close();}catch(SQLException sqle){}
	}

      out.write('\r');
      out.write('\n');
      out.print(msg );
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("<form method=\"post\" action = \"User_page_main.jsp\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"id\" value =");
      out.print(in_id );
      out.write(" >\r\n");
      out.write("\t<input type=\"hidden\" name=\"pw\" value = ");
      out.print(in_pw );
      out.write(" >\r\n");
      out.write("\t<input type=\"submit\" value=\"메인 페이지 돌아가기\">\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
